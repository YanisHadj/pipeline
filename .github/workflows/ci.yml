stages:
  - build
  - test
  - measure
  - document
  - secure
  - deploy

variables:
  GOPROXY: "https://proxy.golang.org" # Cache Go modules
  GOBIN: "$CI_PROJECT_DIR/bin"

# Étape 1: Build
build:
  stage: build
  image: golang:1.20
  script:
    - go mod tidy
    - go build -o myapp
  artifacts:
    paths:
      - myapp
  only:
    - main

# Étape 2: Test
test:
  stage: test
  image: golang:1.20
  script:
    - go test ./... -v

# Étape 3: Measure (Lint et qualité)
measure:
  stage: measure
  image: golangci/golangci-lint:v1.54
  script:
    - golangci-lint run --timeout 5m

# Étape 4: Document
document:
  stage: document
  image: golang:1.20
  script:
    - go install golang.org/x/tools/cmd/godoc@latest
    - godoc -http=:6060 &
    - echo "Documentation is generated."

# Étape 5: Secure (Analyse de sécurité)
secure:
  stage: secure
  image: securego/gosec
  script:
    - gosec ./...

# Étape 6: Deploy
deploy:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to production..."
    - echo "Here you could use Docker, SCP, or any other deployment tool."
  only:
    - main
